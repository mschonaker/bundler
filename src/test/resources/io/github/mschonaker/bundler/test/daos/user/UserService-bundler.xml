<?xml version="1.0" encoding="UTF-8" ?>
<bundler>
	<createTables>
		<![CDATA[
		
		create table users (
			username varchar(200) not null primary key,
			password varchar(20) not null,
			realname varchar(200) not null,
			avatar blob,
		);
		
		create table user_role (
			username varchar(200) not null,
			rolename varchar(20) not null,
			primary key (username, rolename),
			foreign key (username) references users(username)
		);
		
		create table preferences (
			username varchar(200) not null,
			a tinyint(1) not null default 0 not null,
			b tinyint(1) not null default 0,
			primary key (username),
			foreign key (username) references users(username)
		);
		
		insert into users(username, password, realname) values('alpha', 'alpha pass', 'Alpha User');
		insert into users(username, password, realname) values('beta', 'beta pass', 'Beta User');
		
		insert into user_role(username, rolename) values('alpha', 'admin');
		insert into user_role(username, rolename) values('alpha', 'user');
		insert into user_role(username, rolename) values('beta', 'user');
		
		insert into preferences(username, a, b) values ('alpha', 1, 1);
		insert into preferences(username, a, b) values ('beta', 0, 0);
				
	]]>
	</createTables>

	<getAllUsers><![CDATA[
		select * from users order by username
	]]></getAllUsers>

	<getUserPage>
		<list>
			select * from users
			order by username
			limit ${params[0]},
			${params[1]}
		</list>
		<count>select count(*) from users</count>
	</getUserPage>

	<countUsers>
		select count(*) from users
	</countUsers>

	<existsUser>
		select count(*) from users where username = ${param}
	</existsUser>

	<getAllAvailableRoles>
		select distinct(rolename) from user_role order by
		rolename
	</getAllAvailableRoles>

	<getUser>
		select * from users where username = ${params[0]}
	</getUser>

	<getUserRoles>
		select rolename from user_role where username =
		${param}
	</getUserRoles>

	<insertUser><![CDATA[
		insert into users(username, password, realname, avatar)
		values(${param.username}, ${param.password}, ${param.realname}, ${param.avatar});
	]]></insertUser>

	<updateUser><![CDATA[
		update users set password = ${param.password}, realname = ${param.realname}, avatar = ${param.avatar}
		where username = ${param.username}
	]]></updateUser>

	<deleteUser><![CDATA[
		delete from users
		where username = ${param}
	]]></deleteUser>

	<getUserWithRoles>
		select * from users where username = ${params[0]} order by username
		<roles>
			select rolename from user_role where username =
			${parent.username}
		</roles>
	</getUserWithRoles>

	<invalid>
		invalid
	</invalid>

	<illegalSyntax>
		illegal
	</illegalSyntax>

	<illegalSyntax2>
		illegal
	</illegalSyntax2>

	<getUserWithSubSubBean>
		select *, 13 as "sub.sub.id", 14 as
		"sub.sub.id2" from users where username = ${params[0]} order by
		username
	</getUserWithSubSubBean>

	<getUserWithNonexistentProperty>
		select 123 as "property_doesnt_exist"
	</getUserWithNonexistentProperty>

	<getUserWithPreferences>
		select * from users where username = ${param}
		<preferences>
			select * from preferences where username =
			${parent.username}
		</preferences>
	</getUserWithPreferences>

	<getUserWithPreferencesOneShot>
		select users.*, preferences.a as
		"preferences.a", preferences.b as "preferences.b"
		from users inner join
		preferences on users.username = preferences.username
		where
		users.username = ${param}
	</getUserWithPreferencesOneShot>

	<getUserWithPreferencesHybrid>
		select users.*, preferences.a as
		"preferences.a"
		from users inner join
		preferences on users.username =
		preferences.username
		where
		users.username = ${param}
		<preferences>
			select b from preferences where username =
			${parent.username}
		</preferences>
	</getUserWithPreferencesHybrid>

</bundler>